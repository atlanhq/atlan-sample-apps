[project]
name = "polyglot-app"
version = "0.1.0"
description = "Polyglot sample app demonstrating Python-Java integration using Atlan Application SDK and JPype"
authors = [{ name = "Atlan App Team", email = "connect@atlan.com" }]
requires-python = ">=3.11"
license = "Apache-2.0"
readme = "README.md"
dependencies = [
    "atlan-application-sdk[tests,workflows]==0.1.1rc51",
    "jpype1>=1.5.0",
    "poethepoet",
]

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "coverage>=7.0.0",
    "pre-commit>=3.0.0",
]

[tool.poe.tasks]
# Dapr and Temporal service tasks
start-dapr = "dapr run --enable-api-logging --log-level debug --app-id app --app-port 3000 --dapr-http-port 3500 --dapr-grpc-port 50001 --dapr-http-max-request-size 1024 --resources-path components"
start-temporal = "temporal server start-dev --db-filename /tmp/temporal.db"
start-deps.shell = "poe start-dapr & poe start-temporal &"
stop-deps.shell = "lsof -ti:3000,3500,7233,50001 | xargs kill -9 2>/dev/null || true"

# Build Java JAR
build-java.shell = "cd app/libs && chmod +x build.sh && ./build.sh"

# Download SDK components
[tool.poe.tasks.download-components]
interpreter = "python"
env = { SDK_VERSION = "v0.1.1rc51" }
shell = """
import pathlib, requests, os

components_dir = pathlib.Path("components")
components_dir.mkdir(exist_ok=True)

api_url = "https://api.github.com/repos/atlanhq/application-sdk/contents/components"

response = requests.get(api_url, params={"ref": os.getenv("SDK_VERSION")})
response.raise_for_status()

for file_info in response.json():
    if file_info["type"] == "file" and file_info["name"].endswith(".yaml"):
        raw_url = file_info["download_url"]

        file_response = requests.get(raw_url)
        file_response.raise_for_status()

        file_path = components_dir / file_info["name"]
        file_path.write_text(file_response.text)
        print(f"Downloaded: {file_info['name']}")
"""

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::pydantic.warnings.PydanticDeprecatedSince20"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["./**/*.py"]

[tool.hatch.build.targets.wheel]
include = ["./**/*.py"]
packages = [
    "app"
]

# For local development - uncomment to use local SDK
# [tool.uv.sources]
# atlan-application-sdk = { path = "../../../application-sdk", editable = true }

