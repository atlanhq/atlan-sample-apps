[project]
name = "extractor-app"
version = "0.1.0"
description = "Simple extractor app for Table assets built using Atlan Application SDK"
authors = [{ name = "Atlan App Team", email = "connect@atlan.com" }]
requires-python = ">=3.11"
license = "Apache-2.0"
readme = "README.md"
dependencies = [
    "atlan-application-sdk[workflows,tests]==0.1.1rc41",
    "poethepoet",
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "coverage",
]

[tool.poe.tasks]
start-dapr = "dapr run --enable-api-logging --log-level debug --app-id app --app-port 3000 --dapr-http-port 3500 --dapr-grpc-port 50001 --dapr-http-max-request-size 1024 --resources-path components"
start-temporal = "temporal server start-dev --db-filename ./temporal.db"
start-deps.shell = "poe start-dapr & poe start-temporal &"
stop-deps.shell = "lsof -ti:3000,3500,7233,50001 | xargs kill -9 2>/dev/null || true"

[tool.poe.tasks.download-components]
interpreter = "python"
env = { SDK_VERSION = "v0.1.1rc23" }
shell = """
import pathlib, requests, os, shutil, tarfile, tempfile

# Download components
components_dir = pathlib.Path("components")
components_dir.mkdir(exist_ok=True)

api_url = "https://api.github.com/repos/atlanhq/application-sdk/contents/components"

response = requests.get(api_url, params={"ref": os.getenv("SDK_VERSION")})
response.raise_for_status()

for file_info in response.json():
    if file_info["type"] == "file" and file_info["name"].endswith(".yaml"):
        raw_url = file_info["download_url"]

        file_response = requests.get(raw_url)
        file_response.raise_for_status()

        file_path = components_dir / file_info["name"]
        file_path.write_text(file_response.text)
        print(f"Downloaded: {file_info['name']}")

# Download frontend assets
print("Downloading frontend assets...")
package_name = "@atlanhq/app-playground"

# Get package information from npm registry
registry_url = f"https://registry.npmjs.org/{package_name}"
response = requests.get(registry_url)
response.raise_for_status()

package_info = response.json()
latest_version = package_info["dist-tags"]["latest"]
tarball_url = package_info["versions"][latest_version]["dist"]["tarball"]

print(f"Downloading {package_name}@{latest_version}...")

# Create static directory
static_dir = pathlib.Path("frontend/static")
static_dir.mkdir(exist_ok=True)

# Download and extract the package
with tempfile.TemporaryDirectory() as temp_dir:
    temp_path = pathlib.Path(temp_dir)

    # Download tarball
    tarball_response = requests.get(tarball_url)
    tarball_response.raise_for_status()

    tarball_path = temp_path / "package.tgz"
    tarball_path.write_bytes(tarball_response.content)

    # Extract tarball
    with tarfile.open(tarball_path, "r:gz") as tar:
        tar.extractall(temp_path)

    # Look for .output/public directory in the extracted package
    package_dir = temp_path / "package"
    output_public_dir = package_dir / ".output" / "public"

    if not output_public_dir.exists():
        raise FileNotFoundError(f".output/public directory not found in {package_name}")

    # Copy files from .output/public to static directory
    for item in output_public_dir.iterdir():
        dest_path = static_dir / item.name
        if item.is_file():
            shutil.copy2(item, dest_path)
            print(f"Copied: {item.name}")
        elif item.is_dir():
            if dest_path.exists():
                shutil.rmtree(dest_path)
            shutil.copytree(item, dest_path)
            print(f"Copied directory: {item.name}")

print(f"Frontend files downloaded to {static_dir}")
"""

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["./**/*.py"]

[tool.hatch.build.targets.wheel]
include = ["./**/*.py"]
packages = [
    "app"
]

# for local development
[tool.uv.sources]
# atlan-application-sdk = { path = "../application-sdk", editable = true }
# atlan-application-sdk = { git = "https://github.com/atlanhq/application-sdk", rev = "349e45a1ee273315a4474f645332e2ef4c8569a9" }
